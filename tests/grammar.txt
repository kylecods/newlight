program     ->  declaration EOF

declaration ->  varDeclaration
            |   functionDeclaration

functionDeclaration -> "func" IDENTIFIER "("  parameters?  ")" block

varDeclaration -> "var" IDENTIFIER "=" expressionStatement
                |   "var" IDENTIFIER ";"


block -> "{"  statement* "}"

statement ->    forStatement
            |   ifStatement
            |   whileStatement
            |   expressionStatement
            |   returnStatement

forStatement ->  "for" "(" (varDeclaration | expressionStatement |  ";")  (expressionStatement)? ";" (expressionStatement)? ")" block

expressionStatement -> expression ";"

ifStatement -> "if" "(" expression ")" block ("else" block)?

whileStatement -> "while" "(" expression ")" block

returnStatement -> "return" expression ";" 

expression -> BOOL | STRING | IDENTIFIER | DIGIT | LIST | CALL | BINARY | UNARY |"(" expression ")"

parameters -> IDENTIFIER ("," IDENTIFIER )? 

IDENTIFIER -> ALPHA(ALPHA | DIGIT)* 

LIST -> IDENTIFIER "[" expression ("," expression)? "]" 

CALL -> IDENTIFIER "(" expression ("," expression)? ")"

BINARY -> expression "+" expression
        | expression "-" expression
        | expression "*" expression
        | expression "/" expression
        | expression "+=" expression
        | expression "-=" expression
        | expression "/=" expression
        | expression "*=" expression
        | expression "&&" expression
        | expression "||" expression
        | expression "!=" expression
        | expression "==" expression
        | expression ">=" expression
        | expression "<=" expression


UNARY -> "!" expression
        | "--" expression
        | "++" expression
        | "~" expression

POSTEXPR -> expression "--"
        | expression "++"

TENARY -> expression "?" expression ":" expression


ALPHA -> [a-z] | [A-Z]

STRING -> [\"](ALPHA)?(DIGIT)? | [/][*]+ (ALPHA)?(DIGIT)? [*][/] 

BOOL -> "true" | "false" 

DIGIT -> DECIMALDIGIT | HEXDIGIT | BINARYDIGIT | FLOATDIGIT

DECIMALDIGIT -> [0-9]

HEXDIGIT -> 0[x | X][0-9a-fA-F]+

BINARYDIGIT -> 0[b | B][0-1]+

FLOATDIGIT -> DECIMALDIGIT "." DECIMALDIGIT
             